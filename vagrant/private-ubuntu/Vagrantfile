# -*- mode: ruby -*-
# vi: set ft=ruby :

# Box / OS
VAGRANT_BOX = 'ubuntu/focal64'
# Memorable name for your
VM_NAME = 'ubuntu20sec'
# Username on your Mac
HOST_USER = Etc.getlogin
# Host folder to sync
HOST_HOME_PATH = Dir.home
VM_USER = 'vagrant'

# Where to sync to on Guest — 'vagrant' is the default user name
GUEST_HOME_PATH = File.join '/home/', VM_USER

PASSWORD_PATH = ".password"
PASSWORD_ID_PATH = ".password_id"

# Make sure to have installed vagrant-triggers plugin
# > vagrant plugin install vagrant-triggers

# After the first `vagrant up` stop the VM and execute the following steps
# Take the identifier of the storage you want to encrypt
# > HDD_UUID=`VBoxManage showvminfo <VM_NAME> | grep 'SATA.*UUID' | sed 's/^.*UUID: \(.*\))/\1/'`
# Store your usernname (whitespaces are not allowed) in a variable
# > USERNAME="<YOUR_USER_NAME_WITHOUT_WHITESPACES>"
# Encrypt the storage, enter the password when asked
# > VBoxManage encryptmedium $HDD_UUID --newpassword - --newpasswordid $USERNAME --cipher "AES-XTS256-PLAIN64"
# Store the username in a file named .password_id
# > echo $USERNAME > .password_id
# Now, the next time you start the VM you'll be asked for the same password

Vagrant.configure("2") do |config|
  config.vm.box = VAGRANT_BOX
  config.vm.box_check_update = false
  config.vm.hostname = VM_NAME
  
  config.trigger.before :up do
    if File.exists?(PASSWORD_ID_PATH)
      password_id = File.read(PASSWORD_ID_PATH).strip
      print "The VM is encrypted, please enter the password\n#{password_id}: "
      password = STDIN.noecho(&:gets).strip
      File.write(PASSWORD_PATH, password)
      puts ""
    end
  end

  config.trigger.after :up do
    File.delete(PASSWORD_PATH) if File.exists?(PASSWORD_PATH)
  end
  
  config.trigger.after :destroy do
    File.delete(PASSWORD_ID_PATH) if File.exists?(PASSWORD_ID_PATH)
  end

  config.vm.provider :virtualbox do |vb|
    vb.name = VM_NAME
    vb.gui = false
                
    if File.exists?(PASSWORD_ID_PATH)
      password_id = File.read(PASSWORD_ID_PATH).strip           
      vb.customize "post-boot", [
        "controlvm", :id, "addencpassword", password_id, PASSWORD_PATH, "--removeonsuspend", "yes"
      ]
    end
  end
  # DHCP — comment this out if planning on using NAT instead
  # config.vm.network "private_network", type: "dhcp"

  # Port forwarding — uncomment this to use NAT instead of DHCP
  # config.vm.network "forwarded_port", guest: 80, host: VM_PORT

  # Sync folder
  # Secrets
  config.vm.synced_folder File.join(HOST_HOME_PATH, '.secret'), File.join(GUEST_HOME_PATH, '.secret')
  # Shared code
  config.vm.synced_folder File.join(HOST_HOME_PATH, 'shared'), File.join(GUEST_HOME_PATH, 'shared')
  # Shared data
  config.vm.synced_folder File.join(HOST_HOME_PATH, 'data'), File.join(GUEST_HOME_PATH, 'data')
  # Code
  config.vm.synced_folder File.join(HOST_HOME_PATH, 'code'), File.join(GUEST_HOME_PATH, 'code')
  # Also share entire home dir just in case.
  config.vm.synced_folder HOST_HOME_PATH, '/host/'
end
