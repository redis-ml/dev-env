# The code has copied from https://github.com/bazelbuild/rules_python

module(
    name = "example_bzlmod_jupyter",
    version = "0.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.0.0")


# The following stanza defines the dependency for gazelle
# See here https://github.com/bazelbuild/bazel-gazelle/releases/ for the
# latest version.
bazel_dep(name = "gazelle", version = "0.30.0", repo_name = "bazel_gazelle")

# The following stanze returns a proxy object representing a module extension;
# its methods can be invoked to create module extension tags.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.11",
)

# Use the extension, pip.parse, to call the `pip_repository` rule that invokes
# `pip`, with `incremental` set. The pip call accepts a locked/compiled
# requirements file and installs the dependencies listed within.
# Those dependencies become available in a generated `requirements.bzl` file.
# You can instead check this `requirements.bzl` file into your repo.
# Because this project has different requirements for windows vs other
# operating systems, we have requirements for each.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    # The interpreter_target attribute points to the interpreter to
    # use for running pip commands to download the packages in the
    # requirements file.
    # As a best practice, we use the same interpreter as the toolchain
    # that was configured above; this ensures the same Python version
    # is used for both resolving dependencies and running tests/binaries.
    # If this isn't specified, then you'll get whatever is locally installed
    # on your system.
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
    requirements_windows = "//:requirements_windows.txt",
)

# Imports the pip toolchain generated by the given module extension into the scope of the current module.
use_repo(pip, "pip")

